import './findInput.css';
import { IMessage as InputBoxMessage, IInputValidator, IInputBoxStyles, HistoryInputBox } from 'base/browser/ui/inputbox/inputBox';
import { IContextViewProvider } from 'base/browser/ui/contextview/contextview';
import { Widget } from 'base/browser/ui/widget';
import { Event } from 'base/common/event';
import { IKeyboardEvent } from 'base/browser/keyboardEvent';
import { IMouseEvent } from 'base/browser/mouseEvent';
import { Color } from 'base/common/color';
export interface IFindInputOptions extends IFindInputStyles {
    readonly placeholder?: string;
    readonly width?: number;
    readonly validation?: IInputValidator;
    readonly label: string;
    readonly flexibleHeight?: boolean;
    readonly appendCaseSensitiveLabel?: string;
    readonly appendWholeWordsLabel?: string;
    readonly appendRegexLabel?: string;
    readonly history?: string[];
}
export interface IFindInputStyles extends IInputBoxStyles {
    inputActiveOptionBorder?: Color;
}
export declare class FindInput extends Widget {
    private readonly _showOptionButtons;
    static readonly OPTION_CHANGE: string;
    private contextViewProvider;
    private placeholder;
    private validation?;
    private label;
    private fixFocusOnOptionClickEnabled;
    private inputActiveOptionBorder?;
    private inputBackground?;
    private inputForeground?;
    private inputBorder?;
    private inputValidationInfoBorder?;
    private inputValidationInfoBackground?;
    private inputValidationInfoForeground?;
    private inputValidationWarningBorder?;
    private inputValidationWarningBackground?;
    private inputValidationWarningForeground?;
    private inputValidationErrorBorder?;
    private inputValidationErrorBackground?;
    private inputValidationErrorForeground?;
    private regex;
    private wholeWords;
    private caseSensitive;
    domNode: HTMLElement;
    inputBox: HistoryInputBox;
    private readonly _onDidOptionChange;
    readonly onDidOptionChange: Event<boolean>;
    private readonly _onKeyDown;
    readonly onKeyDown: Event<IKeyboardEvent>;
    private readonly _onMouseDown;
    readonly onMouseDown: Event<IMouseEvent>;
    private readonly _onInput;
    readonly onInput: Event<void>;
    private readonly _onKeyUp;
    readonly onKeyUp: Event<IKeyboardEvent>;
    private _onCaseSensitiveKeyDown;
    readonly onCaseSensitiveKeyDown: Event<IKeyboardEvent>;
    private _onRegexKeyDown;
    readonly onRegexKeyDown: Event<IKeyboardEvent>;
    constructor(parent: HTMLElement | null, contextViewProvider: IContextViewProvider, _showOptionButtons: boolean, options: IFindInputOptions);
    enable(): void;
    disable(): void;
    setFocusInputOnOptionClick(value: boolean): void;
    setEnabled(enabled: boolean): void;
    clear(): void;
    getValue(): string;
    setValue(value: string): void;
    onSearchSubmit(): void;
    style(styles: IFindInputStyles): void;
    protected applyStyles(): void;
    select(): void;
    focus(): void;
    getCaseSensitive(): boolean;
    setCaseSensitive(value: boolean): void;
    getWholeWords(): boolean;
    setWholeWords(value: boolean): void;
    getRegex(): boolean;
    setRegex(value: boolean): void;
    focusOnCaseSensitive(): void;
    focusOnRegex(): void;
    private _lastHighlightFindOptions;
    highlightFindOptions(): void;
    private buildDomNode;
    validate(): void;
    showMessage(message: InputBoxMessage): void;
    clearMessage(): void;
    private clearValidation;
    dispose(): void;
}
